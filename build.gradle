plugins {
	id "com.github.unafraid.gradle.git-repo-plugin" version "2.0.4"
	id "de.sebastianboegl.shadow.transformer.log4j" version "2.1.0"
}

apply plugin: "com.github.unafraid.gradle.git-repo-plugin"
apply plugin: "de.sebastianboegl.shadow.transformer.log4j"
apply plugin: "eclipse"
apply plugin: "java"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "findbugs"

sourceCompatibility = JavaVersion.VERSION_1_8

gitPublishConfig {
	org = "lordrex34"
	repo = "commons-annotation-config"
	branch = "releases"
}

group = "com.github.lordrex34.config"
version = "1.0.0"

repositories {
	mavenCentral()
}

eclipse {
	project {
		natures("org.springsource.ide.eclipse.gradle.core.nature")
	}
}

dependencies {
	compile(group: "org.slf4j", name: "slf4j-api", version: "1.7.12")
	compile(group: "com.google.guava", name: "guava", version: "22.0")
	
	testCompile (group: 'junit', name: 'junit', version: '4.12')
}

findbugs {
	findbugsTest.enabled = false
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled false
		html.enabled true
	}
	excludeFilter = file("excludeFilter.xml")
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
	options.addStringOption("Xdoclint:none", "-quiet")
}

task javadocJar(type: Jar) {
	classifier = "javadoc"
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allSource
}

tasks.withType(Javadoc) {
	options.addStringOption("Xdoclint:none", "-quiet")
}

artifacts {
	archives javadocJar, sourcesJar
}

signing {
	required { gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact sourcesJar
		}
	}
	repositories {
		maven {
			url "file://${gitPublishConfig.home}/${gitPublishConfig.org}/${gitPublishConfig.repo}/releases"
		}
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
				authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
				authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
			}

			pom.project {
				name project.name
				packaging "jar"
				description "An annotation based configuration API for static fields."
				url "https://github.com/lordrex34/commons-annotation-config"

				scm {
					connection "scm:git:git@github.com:lordrex34/commons-annotation-config.git"
					developerConnection "scm:git:git@github.com:lordrex34/commons-annotation-config.git"
					url "git@github.com:lordrex34/commons-annotation-config.git"
				}

				licenses {
					license {
						name "MIT License"
						url "https://opensource.org/licenses/MIT"
						distribution "repo"
					}
				}

				developers {
					developer {
						id "lordrex34"
						name "Reginald Ravenhorst"
						email "lordrex34@gmail.com"
						organization "RaveN Network"
						organizationUrl "https://github.com/lordrex34"
						roles {
							role "developer"
						}
					}
				}
			}
		}
	}
}


task wrapper(type: Wrapper) {
	gradleVersion = "3.5"
}

def getRepositoryUsername() {
	return hasProperty("ossrhUsername") ? ossrhUsername : ""
}

def getRepositoryPassword() {
	return hasProperty("ossrhPassword") ? ossrhPassword : ""
}